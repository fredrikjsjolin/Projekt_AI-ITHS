# %% [markdown]
# ## Slutsats:
# 
# - #### Låg korrelation mellan X-värden och y-värdet
# - #### Testar med Logistic Regression och Decission Tree, likvärdigt resultat. Väljer 6/7 av 10 rätt. Dock väljs aldrig "2" i någon av modellerna... 
# - #### Litet dataunderlag,ca 40 rader och 8 kolumner (X) påverkar slutresultatet. Även den låga korrelationen påverkar säkert. Chat GPT ger följande förklaring; logikfel i koden, datafel, ojämn fördelning av datat, begränsningar i algoritmen. Bekräftar dock att valda modeller kan vara bra alternativ för denna analys.
# - #### Summa summarum blir utfallet av det begränsade testet ok men lite märkligt att den aldrig väljer uppgång ("2") som prediction...99% av tiden har gått till datamodifiering. Mycket handpåläggning för att få ut datat och sedan testa med olika varianter av datat.
# 

# %%
import pandas as pd
import numpy as np
from sklearn.linear_model import LogisticRegression

rekar = pd.read_csv("Rekar.csv")

rekar.head(10)

# %% [markdown]
# #### Gör en modiefierad variant av datat där NaN är uppskattat utifrån mest sannolikt utfall (rekar_mod). Bygger på att den senaste rekommendationen är det som gäller då det saknas värden.

# %%
rekar_mod = pd.read_csv("Rekar_mod.csv")

rekar_mod.head(10)

# %%
rekar_mod.corr()

# %%
rekar.corr()

# %% [markdown]
# ### Högst korrelation mellan analyshusen:
# 1. Deutsche Bank och Citi Group (0,63)
# 2. Deutsche Bank och Morgan Stanley (0,45)
# 3. Carnegie och Kepler (0,40)
# 
# ### Korrelationen mellan analyshusen och kursutveckling på 3 mån:
# - Citi 0,21 
# - Danske 0,11
# - Carnegie -0,17
# 
# ### Från Chat GPT:
# 
# 0,00-0,19: Mycket låg korrelation
# 0,20-0,39: Låg korrelation
# 0,40-0,59: Måttlig korrelation
# 0,60-0,79: Hög korrelation
# 0,80-1,00: Mycket hög korrelation

# %% [markdown]
# #### Korrelationen mellan analytikernas rekar och utvecklingen av börskursen är mycket låg. Om man tittar på hur ofta analytikerna har rätt så ligger det mellan 30-40% där 33% är samma som slumpen. 
# 
# #### Om man jämför med datasetet för Iris så var corr -0,43, 0,78, 0,95 och 0,96. Dvs corr mellan de 4 olika X-värdena och y-värdet.

# %%
rekar.groupby(['CARNEGIE'])['UTVECKLING'].mean()

# %% [markdown]
# Svårt att få ut nåt vettigt ut av groupby då utvecklingen kan vara 0 (ned), 1 (samma) och 2 (upp). Borde göra samma på datat då utvecklingen är binär dvs ned (0) eller upp (1). Då kan man tex se om ett analyshus sagt rek "Köp" och hur ofta börskursen oxå gått upp.

# %%
rekar_array = rekar.to_numpy()

rekar_array

# %%
# X = rekar_array[:, :8]

# X
# y = rekar_array.target

# %%
# y = rekar_array[:, 8]

# y

# %% [markdown]
# #### Måste använda det modifierade datat då LR inte tar värden som innehåller NaN

# %%
rekar_mod_array = rekar_mod.to_numpy()

rekar_mod_array

# %%
X = rekar_mod_array[:, :8]

X

# %%
y = rekar_mod_array[:, 8]

y

# %%
clf_lr = LogisticRegression()
clf_lr.fit(X, y)

# %% [markdown]
# Testar med lite olika testdata
# 
# 

# %%
new_input0 = [[0,0,0,0,0,0,0,0]]
new_input1 = [[1,1,1,1,1,1,1,1]]
new_input2 = [[2,2,2,2,2,2,2,2]]

clf_lr.predict(new_input2)



# %%
clf_lr.predict_proba(new_input2)

# %% [markdown]
# #### Väljer ut de 10 första raderna från X som testdata
# 
# #### 6 av 10 test blir rätt....men det blir aldrig "Upp" eller "2". 3 av 4 fel är när y borde varit "2".

# %%
test_input = rekar_mod_array[:10, :8]

test_input

# %%
clf_lr.predict(test_input)


# %%
y_test = rekar_mod_array[:10, 8]

y_test

# %% [markdown]
# #### Decission Tree 
# 
# 

# %%
from sklearn.tree import DecisionTreeClassifier #, export_graphviz
# import graphviz

clf_dectree = DecisionTreeClassifier()
clf_dectree.fit(X, y)

# %%
new_input = [[2,2,2,2,2,2,2,2]]
clf_dectree.predict(new_input)

# %%
clf_dectree.predict(test_input)

# %% [markdown]
# #### Samma sak här, väljer aldrig 2 som utfall. 7 av 10 rätt, bara 2orna som den missar...måste titta närmare på varför? 
# 
# #### Ska även testa med indata där y-värdet är binärt, dvs bara upp (1) eller ned (0). Se separat notebook (rekar_bin). Utfallet blir liknande modellen väljer inte uppgång. Dock om jag matar modellen med testdata som bara ger utfallet Upp, då blir prediction oxå upp.

# %% [markdown]
# #### Testar med några värden då 4 av 5 är "2", då predictar den 2 i 3 av 4 fall. 

# %%
test_input = rekar_mod_array[13:18, :8]

test_input

# %%
y_test = rekar_mod_array[13:18, 8]

y_test

# %%
clf_lr.predict(test_input)

# %% [markdown]
# #### Nu väljs ändå "2" i 3 av 4 fall......

# %%
